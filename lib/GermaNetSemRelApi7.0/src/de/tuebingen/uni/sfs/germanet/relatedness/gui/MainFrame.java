/*
 * Copyright (C) 2012 Department of General and Computational Linguistics,
 * University of Tuebingen
 *
 * This file is part of the Java Relatedness API to GermaNet.
 *
 * The Java Relatedness API to GermaNet is free software: you can redistribute
 * it and/or modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * The Java Relatedness API to GermaNet is distributed in the hope that it will
 * be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this API; if not, see <http://www.gnu.org/licenses/>.
 */
package de.tuebingen.uni.sfs.germanet.relatedness.gui;

import de.tuebingen.uni.sfs.germanet.api.*;
import de.tuebingen.uni.sfs.germanet.relatedness.*;
import de.tuebingen.uni.sfs.germanet.relatedness.Path;
import de.tuebingen.uni.sfs.germanet.relatedness.Frequency;
import java.awt.Dimension;
import java.util.*;
import java.io.*;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * @author University of Tuebingen, Department of Linguistics
 * (germanetinfo at sfs.uni-tuebingen.de)
 */
public class MainFrame extends javax.swing.JFrame {

    static GermaNet gnet;
    static HashMap<String, Integer> frequencies;
    static String word1, word2;
    static List<Synset> synsets1, synsets2;

    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jFrame1 = new javax.swing.JFrame();
        jFileChooser1 = new javax.swing.JFileChooser();
        word1TextField = new javax.swing.JTextField();
        word2TextField = new javax.swing.JTextField();
        w1Label = new javax.swing.JLabel();
        w2Label = new javax.swing.JLabel();
        calculateSRWordsButton = new javax.swing.JButton();
        chooseMeasureComboBox = new javax.swing.JComboBox();
        chooseSynset1ComboBox = new javax.swing.JComboBox();
        chooseSynset2ComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        showPathButton = new javax.swing.JButton();
        clearOutputAreaButton = new javax.swing.JButton();
        leastCommonSubsumerButton = new javax.swing.JButton();
        jMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileChooserItem = new javax.swing.JMenuItem();
        closeMenuItem = new javax.swing.JMenuItem();
        pathMenu = new javax.swing.JMenu();
        allPathsRootItem = new javax.swing.JMenuItem();
        shortestPathRootItem = new javax.swing.JMenuItem();
        distanceToRoot = new javax.swing.JMenuItem();
        relationsMenu = new javax.swing.JMenu();
        hyponymItem = new javax.swing.JMenuItem();
        hyperonymsItem = new javax.swing.JMenuItem();
        meronymsItem = new javax.swing.JMenuItem();
        holonymsItem = new javax.swing.JMenuItem();

        jFrame1.setName("jFrame1"); // NOI18N

        jFileChooser1.setName("jFileChooser1"); // NOI18N

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(MainFrame.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setFocusTraversalPolicyProvider(true);
        setName("Form"); // NOI18N

        word1TextField.setText(resourceMap.getString("word1TextField.text")); // NOI18N
        word1TextField.setName("word1TextField"); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, word2TextField, org.jdesktop.beansbinding.ObjectProperty.create(), word1TextField, org.jdesktop.beansbinding.BeanProperty.create("nextFocusableComponent"));
        bindingGroup.addBinding(binding);

        word1TextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                word1TextFieldActionPerformed(evt);
            }
        });
        word1TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                word1TextFieldFocusLost(evt);
            }
        });

        word2TextField.setText(resourceMap.getString("word2TextField.text")); // NOI18N
        word2TextField.setName("word2TextField"); // NOI18N
        word2TextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                word2TextFieldActionPerformed(evt);
            }
        });
        word2TextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                word2TextFieldFocusLost(evt);
            }
        });

        w1Label.setText(resourceMap.getString("w1Label.text")); // NOI18N
        w1Label.setName("w1Label"); // NOI18N

        w2Label.setText(resourceMap.getString("w2Label.text")); // NOI18N
        w2Label.setName("w2Label"); // NOI18N

        calculateSRWordsButton.setText(resourceMap.getString("calculateSRWordsButton.text")); // NOI18N
        calculateSRWordsButton.setToolTipText(resourceMap.getString("calculateSRWordsButton.toolTipText")); // NOI18N
        calculateSRWordsButton.setDisabledSelectedIcon(resourceMap.getIcon("calculateSRWordsButton.disabledSelectedIcon")); // NOI18N
        calculateSRWordsButton.setEnabled(false);
        calculateSRWordsButton.setName("calculateSRWordsButton"); // NOI18N
        calculateSRWordsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateSRWordsButtonActionPerformed(evt);
            }
        });

        chooseMeasureComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All Measures", "Hirst and StOnge", "Jiang and Conrath", "Leacock and Chodorow", "Lesk", "Resnik", "Wu and Palmer", "Lin", "Path" }));
        chooseMeasureComboBox.setName("chooseMeasureComboBox"); // NOI18N

        chooseSynset1ComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All Synsets" }));
        chooseSynset1ComboBox.setEnabled(false);
        chooseSynset1ComboBox.setName("chooseSynset1ComboBox"); // NOI18N
        chooseSynset1ComboBox.setRenderer(new SynsetListRenderer());

        chooseSynset2ComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All Synsets" }));
        chooseSynset2ComboBox.setEnabled(false);
        chooseSynset2ComboBox.setName("chooseSynset2ComboBox"); // NOI18N
        chooseSynset2ComboBox.setRenderer(new SynsetListRenderer());

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        outputTextArea.setColumns(20);
        outputTextArea.setEditable(false);
        outputTextArea.setRows(5);
        outputTextArea.setName("outputTextArea"); // NOI18N
        jScrollPane1.setViewportView(outputTextArea);

        showPathButton.setText(resourceMap.getString("showPathButton.text")); // NOI18N
        showPathButton.setEnabled(false);
        showPathButton.setName("showPathButton"); // NOI18N
        showPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPathButtonActionPerformed(evt);
            }
        });

        clearOutputAreaButton.setText(resourceMap.getString("clearOutputAreaButton.text")); // NOI18N
        clearOutputAreaButton.setEnabled(false);
        clearOutputAreaButton.setName("clearOutputAreaButton"); // NOI18N
        clearOutputAreaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearOutputAreaButtonActionPerformed(evt);
            }
        });

        leastCommonSubsumerButton.setText(resourceMap.getString("leastCommonSubsumerButton.text")); // NOI18N
        leastCommonSubsumerButton.setEnabled(false);
        leastCommonSubsumerButton.setName("leastCommonSubsumerButton"); // NOI18N
        leastCommonSubsumerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leastCommonSubsumerButtonActionPerformed(evt);
            }
        });

        jMenuBar.setName("jMenuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        fileChooserItem.setText(resourceMap.getString("fileChooserItem.text")); // NOI18N
        fileChooserItem.setName("fileChooserItem"); // NOI18N
        fileChooserItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserItemActionPerformed(evt);
            }
        });
        fileMenu.add(fileChooserItem);

        closeMenuItem.setText(resourceMap.getString("closeMenuItem.text")); // NOI18N
        closeMenuItem.setName("closeMenuItem"); // NOI18N
        closeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(closeMenuItem);

        jMenuBar.add(fileMenu);

        pathMenu.setText(resourceMap.getString("pathMenu.text")); // NOI18N
        pathMenu.setName("pathMenu"); // NOI18N

        allPathsRootItem.setText(resourceMap.getString("allPathsRootItem.text")); // NOI18N
        allPathsRootItem.setName("allPathsRootItem"); // NOI18N
        allPathsRootItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allPathsRootItemActionPerformed(evt);
            }
        });
        pathMenu.add(allPathsRootItem);

        shortestPathRootItem.setText(resourceMap.getString("shortestPathRootItem.text")); // NOI18N
        shortestPathRootItem.setName("shortestPathRootItem"); // NOI18N
        shortestPathRootItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shortestPathRootItemActionPerformed(evt);
            }
        });
        pathMenu.add(shortestPathRootItem);

        distanceToRoot.setText(resourceMap.getString("distanceToRoot.text")); // NOI18N
        distanceToRoot.setName("distanceToRoot"); // NOI18N
        distanceToRoot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distanceToRootActionPerformed(evt);
            }
        });
        pathMenu.add(distanceToRoot);

        jMenuBar.add(pathMenu);

        relationsMenu.setText(resourceMap.getString("relationsMenu.text")); // NOI18N
        relationsMenu.setName("relationsMenu"); // NOI18N

        hyponymItem.setText(resourceMap.getString("hyponymItem.text")); // NOI18N
        hyponymItem.setName("hyponymItem"); // NOI18N
        hyponymItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hyponymItemActionPerformed(evt);
            }
        });
        relationsMenu.add(hyponymItem);

        hyperonymsItem.setText(resourceMap.getString("hyperonymsItem.text")); // NOI18N
        hyperonymsItem.setName("hyperonymsItem"); // NOI18N
        hyperonymsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hyperonymsItemActionPerformed(evt);
            }
        });
        relationsMenu.add(hyperonymsItem);

        meronymsItem.setText(resourceMap.getString("meronymsItem.text")); // NOI18N
        meronymsItem.setName("meronymsItem"); // NOI18N
        meronymsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meronymsItemActionPerformed(evt);
            }
        });
        relationsMenu.add(meronymsItem);

        holonymsItem.setText(resourceMap.getString("holonymsItem.text")); // NOI18N
        holonymsItem.setName("holonymsItem"); // NOI18N
        holonymsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                holonymsItemActionPerformed(evt);
            }
        });
        relationsMenu.add(holonymsItem);

        jMenuBar.add(relationsMenu);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(w1Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(w2Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(word1TextField)
                                .addComponent(word2TextField, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE))
                            .addGap(24, 24, 24)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(chooseSynset1ComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(chooseSynset2ComboBox, 0, 313, Short.MAX_VALUE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(chooseMeasureComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(calculateSRWordsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(showPathButton, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(leastCommonSubsumerButton))
                            .addGap(28, 28, 28)))
                    .addComponent(clearOutputAreaButton, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(w1Label)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(word1TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(chooseSynset1ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(w2Label)
                    .addComponent(word2TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseSynset2ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseMeasureComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(leastCommonSubsumerButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calculateSRWordsButton)
                    .addComponent(showPathButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(clearOutputAreaButton)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {chooseSynset1ComboBox, chooseSynset2ComboBox});

        calculateSRWordsButton.getAccessibleContext().setAccessibleDescription(resourceMap.getString("calculateSRWordsButton.AccessibleContext.accessibleDescription")); // NOI18N
        leastCommonSubsumerButton.getAccessibleContext().setAccessibleName(resourceMap.getString("jButton1.AccessibleContext.accessibleName")); // NOI18N

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
     * With this method the Semantic Relatedness Measure is calculated for all of the words corresponding synsets
     */
private void calculateSRWordsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateSRWordsButtonActionPerformed
    List<Synset> chosen1;
    List<Synset> chosen2;


    word1 = word1TextField.getText();
    word2 = word2TextField.getText();
    if (word1.length() == 0) {
        JOptionPane.showMessageDialog(null, "Type in Word1");
    } else if (word2.length() == 0) {
        JOptionPane.showMessageDialog(null, "Type in Word2");
    } else {



        //gets the information from the ComboBox about which Measure is chosen
        String measure = (String) chooseMeasureComboBox.getSelectedItem();

        if (chooseSynset1ComboBox.getSelectedIndex() == 0) {
            word1 = word1TextField.getText();
            chosen1 = gnet.getSynsets(word1);
        } else {

            Synset synset1 = (Synset) chooseSynset1ComboBox.getSelectedItem();
            chosen1 = new ArrayList<Synset>();
            chosen1.add(synset1);

        }



        if (chooseSynset2ComboBox.getSelectedIndex() == 0) {
            word2 = word2TextField.getText();
            chosen2 = gnet.getSynsets(word2);

        } else {
            Synset synset2 = (Synset) chooseSynset2ComboBox.getSelectedItem();
            chosen2 = new ArrayList<Synset>();
            chosen2.add(synset2);
        }

        //calls the method which calculates the corresponding measure for all of the synsets
        String output = RelatednessMeasureOutput.resultAllSynsets(chosen1, chosen2, measure, gnet, frequencies);
        outputTextArea.append(output);
        clearOutputAreaButton.setEnabled(true);
    }
}//GEN-LAST:event_calculateSRWordsButtonActionPerformed

    /*
     * calculates the Semantic Relatedness Measures for the chosen synsets of the words
     */
private void word1TextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_word1TextFieldActionPerformed

    word1 = word1TextField.getText();
    if (word1.length() < 1) {
        calculateSRWordsButton.setEnabled(false);
        showPathButton.setEnabled(false);
        chooseSynset1ComboBox.setEnabled(false);
        leastCommonSubsumerButton.setEnabled(false);
    }
    chooseSynset1ComboBox.removeAllItems();
    synsets1 = null;
    synsets1 = gnet.getSynsets(word1);
    if (synsets1.size() < 1) {
        if (word1.length() > 1) {
            JOptionPane.showMessageDialog(null, word1 + " could not be found in GermaNet");
            chooseSynset1ComboBox.setEnabled(false);
        }
    } else if (synsets1.size() == 1) {
        chooseSynset1ComboBox.addItem(synsets1.get(0));
        chooseSynset1ComboBox.setEnabled(true);
    } else {
        chooseSynset1ComboBox.setEnabled(true);
        chooseSynset1ComboBox.addItem("All Synsets");
        for (Synset s1 : synsets1) {
            chooseSynset1ComboBox.addItem(s1);
        }
    }
    if (synsets2.size() > 0 && synsets1.size() > 0) {
        calculateSRWordsButton.setEnabled(true);
        showPathButton.setEnabled(true);
        leastCommonSubsumerButton.setEnabled(true);
    } else {
        calculateSRWordsButton.setEnabled(false);
        showPathButton.setEnabled(false);
        leastCommonSubsumerButton.setEnabled(false);


    }

}//GEN-LAST:event_word1TextFieldActionPerformed

    private void showPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPathButtonActionPerformed

            Synset synset1 = null;
            Synset synset2 = null;
            if (chooseSynset1ComboBox.getSelectedIndex() == 0) {
                JComboBox tempBox1 = new JComboBox();
                for (Synset syn : synsets1) {
                    tempBox1.addItem(syn);
                }
                tempBox1.setRenderer(new SynsetListRenderer());
                if (JOptionPane.showConfirmDialog(this, tempBox1, "Choose a synset", JOptionPane.OK_CANCEL_OPTION)
                        == JOptionPane.YES_OPTION) {
                    synset1 = (Synset) tempBox1.getSelectedItem();
                    chooseSynset1ComboBox.setSelectedItem(synset1);
                } else return;

            } else {
                synset1 = (Synset) chooseSynset1ComboBox.getSelectedItem();

            }


            if (chooseSynset2ComboBox.getSelectedIndex() == 0) {
                JComboBox tempBox2 = new JComboBox();
                for (Synset syn : synsets2) {
                    tempBox2.addItem(syn);
                }
                tempBox2.setRenderer(new SynsetListRenderer());
                if (JOptionPane.showConfirmDialog(this, tempBox2, "Choose a synset", JOptionPane.OK_CANCEL_OPTION)
                        == JOptionPane.YES_OPTION) {
                    synset2 = (Synset) tempBox2.getSelectedItem();
                    chooseSynset2ComboBox.setSelectedItem(synset2);
                } else return;

            } else {

                synset2 = (Synset) chooseSynset2ComboBox.getSelectedItem();

            }
            Path p1 = new Path(synset1);
            ShowPath sp = new ShowPath(p1, gnet);
            sp.showShortestPath(synset2);

            clearOutputAreaButton.setEnabled(true);


    }//GEN-LAST:event_showPathButtonActionPerformed

    private void word1TextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_word1TextFieldFocusLost
        chooseSynset1ComboBox.removeAllItems();
        word1 = word1TextField.getText();
        if (word1.length() < 1) {
            calculateSRWordsButton.setEnabled(false);
            chooseSynset1ComboBox.setEnabled(false);
            leastCommonSubsumerButton.setEnabled(false);
            showPathButton.setEnabled(false);

        } else {
            chooseSynset1ComboBox.removeAllItems();
            synsets1 = null;
            synsets1 = gnet.getSynsets(word1);

            if (synsets1.size() < 1) {
                calculateSRWordsButton.setEnabled(false);
                leastCommonSubsumerButton.setEnabled(false);
                showPathButton.setEnabled(false);
                chooseSynset1ComboBox.setEnabled(false);
                JOptionPane.showMessageDialog(null, word1 + " could not be found in GermaNet");
            } else if (synsets1.size() == 1) {
                chooseSynset1ComboBox.addItem(synsets1.get(0));
                chooseSynset1ComboBox.setEnabled(true);

            } else {
                chooseSynset1ComboBox.setEnabled(true);
                chooseSynset1ComboBox.addItem("All Synsets");
                for (Synset s1 : synsets1) {
                    chooseSynset1ComboBox.addItem(s1);
                }
            }
            if (synsets2.size() > 0 && synsets1.size() > 0) {
                calculateSRWordsButton.setEnabled(true);
                showPathButton.setEnabled(true);

                leastCommonSubsumerButton.setEnabled(true);
            } else {
                calculateSRWordsButton.setEnabled(false);
                showPathButton.setEnabled(false);
                leastCommonSubsumerButton.setEnabled(false);
            }
        }
    }//GEN-LAST:event_word1TextFieldFocusLost

        private void word2TextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_word2TextFieldFocusLost
            chooseSynset2ComboBox.removeAllItems();
            word2 = word2TextField.getText();
            if (word2.length() < 1) {
                calculateSRWordsButton.setEnabled(false);
                showPathButton.setEnabled(false);
                chooseSynset2ComboBox.setEnabled(false);
                leastCommonSubsumerButton.setEnabled(false);
            } else {
                synsets2 = null;
                synsets2 = gnet.getSynsets(word2);
                chooseSynset2ComboBox.removeAllItems();

                if (synsets2.size() < 1) {
                    chooseSynset2ComboBox.setEnabled(false);
                    leastCommonSubsumerButton.setEnabled(false);
                    JOptionPane.showMessageDialog(null, word2 + " could not be found in GermaNet");

                } else if (synsets2.size() == 1) {
                    chooseSynset2ComboBox.setEnabled(true);
                    chooseSynset2ComboBox.addItem(synsets2.get(0));
                } else {
                    chooseSynset2ComboBox.setEnabled(true);
                    chooseSynset2ComboBox.addItem("All Synsets");
                    for (Synset s2 : synsets2) {
                        chooseSynset2ComboBox.addItem(s2);
                    }
                }
                if (synsets1.size() > 0 && synsets2.size() > 0) {
                    calculateSRWordsButton.setEnabled(true);
                    leastCommonSubsumerButton.setEnabled(true);
                    showPathButton.setEnabled(true);
                } else {
                    calculateSRWordsButton.setEnabled(false);
                    showPathButton.setEnabled(false);
                    leastCommonSubsumerButton.setEnabled(false);
                }
            }
    }//GEN-LAST:event_word2TextFieldFocusLost

    private void word2TextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_word2TextFieldActionPerformed
        chooseSynset2ComboBox.removeAllItems();
        word2 = word2TextField.getText();
        if (word2.length() < 1) {
            calculateSRWordsButton.setEnabled(false);
            showPathButton.setEnabled(false);
            leastCommonSubsumerButton.setEnabled(false);
            chooseSynset2ComboBox.setEnabled(false);

        }
        synsets2 = null;
        synsets2 = gnet.getSynsets(word2);
        if (synsets2.size() < 1) {
            if (word2.length() > 1) {
                JOptionPane.showMessageDialog(null, word2 + " could not be found in GermaNet");
                chooseSynset1ComboBox.setEnabled(false);
            }
        } else if (synsets2.size() == 1) {
            chooseSynset2ComboBox.addItem(synsets2.get(0));
            chooseSynset2ComboBox.setEnabled(true);
        } else {
            chooseSynset2ComboBox.addItem("All Synsets");
            chooseSynset2ComboBox.setEnabled(true);
            for (Synset s2 : synsets2) {
                chooseSynset2ComboBox.addItem(s2);
            }
        }
        if (synsets1.size() > 0 && synsets2.size() > 0) {
            calculateSRWordsButton.setEnabled(true);
            showPathButton.setEnabled(true);
            leastCommonSubsumerButton.setEnabled(true);
        } else {
            calculateSRWordsButton.setEnabled(false);
            showPathButton.setEnabled(false);
            leastCommonSubsumerButton.setEnabled(false);
        }

    }//GEN-LAST:event_word2TextFieldActionPerformed

    private void closeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_closeMenuItemActionPerformed

    private void fileChooserItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserItemActionPerformed
        FileNameExtensionFilter ft = new FileNameExtensionFilter("Text Files", "txt");
        jFileChooser1.addChoosableFileFilter(ft);
        int option = jFileChooser1.showOpenDialog(this);
        if (option == javax.swing.JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser1.getSelectedFile();
            WordListReader wlr = new WordListReader(file);
            List<String[]> wordList = wlr.getWords();
            String measure = (String) chooseMeasureComboBox.getSelectedItem();
            outputTextArea.append(RelatednessMeasureOutput.resultforWordList(wordList, measure, gnet, frequencies));
            clearOutputAreaButton.setEnabled(true);
        }
    }//GEN-LAST:event_fileChooserItemActionPerformed

    private void clearOutputAreaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearOutputAreaButtonActionPerformed
        outputTextArea.setText("");
        clearOutputAreaButton.setEnabled(false);
    }//GEN-LAST:event_clearOutputAreaButtonActionPerformed

    private void allPathsRootItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allPathsRootItemActionPerformed
        try {
            Path p = new Path(getUserInput());
            ShowPath sp = new ShowPath(p, gnet);
            outputTextArea.append(sp.showPathtoRoot(gnet));
            outputTextArea.append("\n");
            clearOutputAreaButton.setEnabled(true);
        } catch (NullPointerException e) {
        }
    }//GEN-LAST:event_allPathsRootItemActionPerformed

    private void shortestPathRootItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shortestPathRootItemActionPerformed
        try {
            Path p = new Path(getUserInput());
            ShowPath sp = new ShowPath(p, gnet);
            outputTextArea.append(sp.showShortestPathtoRoot());
            outputTextArea.append("\n");
            clearOutputAreaButton.setEnabled(true);
        } catch (NullPointerException e) {
        }


    }//GEN-LAST:event_shortestPathRootItemActionPerformed

    private void distanceToRootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distanceToRootActionPerformed
        try {
            Path p = new Path(getUserInput());
            outputTextArea.append(Integer.toString(p.getDepth()));
            outputTextArea.append("\n");
            clearOutputAreaButton.setEnabled(true);
        } catch (NullPointerException e) {
        }
    }//GEN-LAST:event_distanceToRootActionPerformed

    private void hyperonymsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hyperonymsItemActionPerformed
        try {
            Synset chosen = getUserInput();
            List<Synset> hypernyms = chosen.getRelatedSynsets(ConRel.has_hypernym);
            outputTextArea.append("Hypernyms for " + chosen.getId() + " " + chosen.getAllOrthForms() + ":\n");
            if (hypernyms.isEmpty()) {
                outputTextArea.append("No Hypernyms");
            } else {
                for (Synset s : hypernyms) {
                    outputTextArea.append(s.getId() + " " + s.getAllOrthForms() + "\n");
                }
            }
            outputTextArea.append("\n");
            clearOutputAreaButton.setEnabled(true);
        } catch (NullPointerException e) {
        }
    }//GEN-LAST:event_hyperonymsItemActionPerformed

    private void hyponymItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hyponymItemActionPerformed
        try {
            Synset chosen = getUserInput();
            List<Synset> hyponyms = chosen.getRelatedSynsets(ConRel.has_hyponym);
            outputTextArea.append("Hyponyms for " + chosen.getId() + " " + chosen.getAllOrthForms() + ":\n");
            if (hyponyms.isEmpty()) {
                outputTextArea.append("No Hyponyms");
            } else {
                for (Synset s : hyponyms) {
                    outputTextArea.append(s.getId() + " " + s.getAllOrthForms() + "\n");
                }
            }
            outputTextArea.append("\n");
            clearOutputAreaButton.setEnabled(true);
        } catch (NullPointerException e) {
        }
    }//GEN-LAST:event_hyponymItemActionPerformed

    private void meronymsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meronymsItemActionPerformed
        try {
            Synset chosen = getUserInput();

            JCheckBox memberMeronym = new JCheckBox("Member Meronyms");
            JCheckBox substanceMeronym = new JCheckBox("Substance Meronym");
            JCheckBox portionMeronym = new JCheckBox("Portion Meronym");
            JCheckBox componentMeronym = new JCheckBox("Component Meronym");
            String msg = "Choose meronym types";
            Object[] msgObject = {msg, memberMeronym, substanceMeronym, portionMeronym, componentMeronym};
            JOptionPane.showMessageDialog(this, msgObject, msg, JOptionPane.PLAIN_MESSAGE);
            outputTextArea.append("Meronyms for synset:" + chosen.getId() + " " + chosen.getAllOrthForms() + ":\n");
            List<Synset> meronyms = new ArrayList<Synset>();
            if (memberMeronym.isSelected()) {
                List<Synset> memberMeronyms = chosen.getRelatedSynsets(ConRel.has_member_meronym);
                for (Synset currS : memberMeronyms) {
                    meronyms.add(currS);
                }
            }
            if (componentMeronym.isSelected()) {
                List<Synset> componentMeronyms = chosen.getRelatedSynsets(ConRel.has_component_meronym);
                for (Synset currS : componentMeronyms) {
                    meronyms.add(currS);
                }
            }
            if (portionMeronym.isSelected()) {
                List<Synset> portionMeronyms = chosen.getRelatedSynsets(ConRel.has_portion_meronym);
                for (Synset currS : portionMeronyms) {
                    meronyms.add(currS);
                }
            }
            if (substanceMeronym.isSelected()) {
                List<Synset> substanceMeronyms = chosen.getRelatedSynsets(ConRel.has_substance_meronym);
                for (Synset currS : substanceMeronyms) {
                    meronyms.add(currS);
                }
            }
            if (meronyms.isEmpty()) {
                outputTextArea.append("No Meronyms" + "\n");
            } else {
                for (Synset currM : meronyms) {
                    outputTextArea.append(currM.getId() + " " + currM.getAllOrthForms() + "\n");
                }
            }
            outputTextArea.append("\n");
            clearOutputAreaButton.setEnabled(true);
        } catch (NullPointerException e) {
        }
    }//GEN-LAST:event_meronymsItemActionPerformed

    private void holonymsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_holonymsItemActionPerformed
        try {
            Synset chosen = getUserInput();

            JCheckBox memberHolonym = new JCheckBox("Member Holonyms");
            JCheckBox substanceHolonym = new JCheckBox("Substance Holonym");
            JCheckBox portionHolonym = new JCheckBox("Portion Holonym");
            JCheckBox componentHolonym = new JCheckBox("Component Holonym");
            String msg = "Choose holonym types";
            Object[] msgObject = {msg, memberHolonym, substanceHolonym, portionHolonym, componentHolonym};
            JOptionPane.showMessageDialog(this, msgObject, msg, JOptionPane.PLAIN_MESSAGE);
            outputTextArea.append("Holonyms for synset:" + chosen.getId() + " " + chosen.getAllOrthForms() + ":\n");
            List<Synset> holonyms = new ArrayList<Synset>();
            if (memberHolonym.isSelected()) {
                List<Synset> memberHolonyms = chosen.getRelatedSynsets(ConRel.has_member_holonym);
                for (Synset currS : memberHolonyms) {
                    holonyms.add(currS);
                }
            }
            if (componentHolonym.isSelected()) {
                List<Synset> componentHolonyms = chosen.getRelatedSynsets(ConRel.has_component_holonym);
                for (Synset currS : componentHolonyms) {
                    holonyms.add(currS);
                }
            }
            if (portionHolonym.isSelected()) {
                List<Synset> portionHolonyms = chosen.getRelatedSynsets(ConRel.has_portion_holonym);
                for (Synset currS : portionHolonyms) {
                    holonyms.add(currS);
                }
            }
            if (substanceHolonym.isSelected()) {
                List<Synset> substanceHolonyms = chosen.getRelatedSynsets(ConRel.has_substance_holonym);
                for (Synset currS : substanceHolonyms) {
                    holonyms.add(currS);
                }
            }
            if (holonyms.isEmpty()) {
                outputTextArea.append("No Holonyms" + "\n");
            } else {
                for (Synset currM : holonyms) {
                    outputTextArea.append(currM.getId() + " " + currM.getAllOrthForms() + "\n");
                }
            }
            outputTextArea.append("\n");
            clearOutputAreaButton.setEnabled(true);
        } catch (NullPointerException e) {
        }
    }//GEN-LAST:event_holonymsItemActionPerformed

    private void leastCommonSubsumerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leastCommonSubsumerButtonActionPerformed
        int index1 = chooseSynset1ComboBox.getSelectedIndex();
        int index2 = chooseSynset2ComboBox.getSelectedIndex();
        if (!(index1 == 0 && synsets1.size() > 1)) {
            Synset synset1 = (Synset) chooseSynset1ComboBox.getSelectedItem();
            Path path1 = new Path(synset1);

            if (!(index2 == 0 && synsets2.size() > 1)) {
                Synset synset2 = (Synset) chooseSynset2ComboBox.getSelectedItem();
                Path path2 = new Path(synset2);
                ArrayList<PathNode> leastCommonSubsumer = path1.getLeastCommonSubsumer(path2);
                for (PathNode pn : leastCommonSubsumer) {
                    outputTextArea.append(synset1.getId() + " " + synset1.getAllOrthForms() + " and " + synset2.getId() + " " + synset2.getAllOrthForms() + "\n");
                    outputTextArea.append("Least Common Subsumer:" + pn.synset.getAllOrthForms() + ":" + pn.synset.getId() + "\n");
                    outputTextArea.append("The path distance is:" + pn.index + "\n");
                }
            } else {
                for (Synset currSynset2 : synsets2) {
                    Path currPath2 = new Path(currSynset2);
                    ArrayList<PathNode> leastCommonSubsumer = path1.getLeastCommonSubsumer(currPath2);
                    for (PathNode pn : leastCommonSubsumer) {
                        outputTextArea.append(synset1.getId() + " " + synset1.getAllOrthForms() + " and " + currSynset2.getId() + " " + currSynset2.getAllOrthForms() + "\n");
                        outputTextArea.append("Least Common Subsumer:" + pn.synset.getAllOrthForms() + ":" + pn.synset.getId() + "\n");
                        outputTextArea.append("The path distance is:" + pn.index + "\n");
                    }
                }
            }
        } else {
            if (!(index2 == 0 && synsets2.size() > 1)) {
                Synset synset2 = (Synset) chooseSynset2ComboBox.getSelectedItem();
                Path path2 = new Path(synset2);
                for (Synset currSynset1 : synsets1) {
                    Path path1 = new Path(currSynset1);
                    ArrayList<PathNode> leastCommonSubsumer = path1.getLeastCommonSubsumer(path2);
                    for (PathNode pn : leastCommonSubsumer) {
                        outputTextArea.append(currSynset1.getId() + " " + currSynset1.getAllOrthForms() + " and " + synset2.getId() + " " + synset2.getAllOrthForms() + "\n");
                        outputTextArea.append("Least Common Subsumer:" + pn.synset.getAllOrthForms() + ":" + pn.synset.getId() + "\n");
                        outputTextArea.append("The path distance is:" + pn.index + "\n");
                    }
                }
            } else {
                for (Synset currSynset1 : synsets1) {
                    Path path1 = new Path(currSynset1);
                    for (Synset currSynset2 : synsets2) {
                        Path path2 = new Path(currSynset2);
                        ArrayList<PathNode> leastCommonSubsumer = path1.getLeastCommonSubsumer(path2);
                        for (PathNode pn : leastCommonSubsumer) {
                            outputTextArea.append(currSynset1.getId() + " " + currSynset1.getAllOrthForms() + " and " + currSynset2.getId() + " " + currSynset2.getAllOrthForms() + "\n");
                            outputTextArea.append("Least Common Subsumer:" + pn.synset.getAllOrthForms() + ":" + pn.synset.getId() + "\n");
                            outputTextArea.append("The path distance is:" + pn.index + "\n");
                        }



                    }
                }
            }

            outputTextArea.append("\n");
            clearOutputAreaButton.setEnabled(true);
        }
    }//GEN-LAST:event_leastCommonSubsumerButtonActionPerformed

    /**
     * Helper method which prompts the user to pick a word and a corresponding
     * synset by means of a JOptionsPane
     * @return the Synset picked by user
     */
    private Synset getUserInput() {
        String word = JOptionPane.showInputDialog("Type in word here:");
        while (gnet.getSynsets(word).isEmpty()) {
            word = JOptionPane.showInputDialog("No such word found. Try again:");
        }
        JComboBox tempBox = new JComboBox();
        for (Synset syn : gnet.getSynsets(word)) {
            tempBox.addItem(syn);
        }
        tempBox.setRenderer(new SynsetListRenderer());
        Synset chosen = null;
        if (JOptionPane.showConfirmDialog(this, tempBox, "Choose a synset", JOptionPane.OK_CANCEL_OPTION)
                == JOptionPane.YES_OPTION) {
            chosen = (Synset) tempBox.getSelectedItem();
        }
        return chosen;
    }

    /**
     * 
     * @param args pathToGermaNet FrequencyDirectory
     */
    public static void main(String args[]) {
        synsets1 = new ArrayList<Synset>();
        synsets2 = new ArrayList<Synset>();

        if (args.length < 2) {
            JOptionPane.showMessageDialog(null, "USAGE: pathToGermaNet, "
                    + "frequencyDirectory");
            System.exit(0);
        }

        //check if all three input Strings are valid file/directory names:
        for (int i = 0; i < args.length; i++) {
            File f1 = new File(args[i]);
            //if no directory name, using current -> no check necessary
            if (args[i].contains("/")) {
                File path = new File(f1.getPath().substring(
                        0, f1.getPath().lastIndexOf("/"))); //get path1 to input file
                if (!path.isDirectory()) {
                    JOptionPane.showMessageDialog(null, "Path " + f1.getAbsolutePath() + " is invalid.");
                    System.exit(0);
                }
            }
        }

        try {
            gnet = new GermaNet(args[0], true); //ignore case

//            System.out.print("\nGermaNet version (this is written for 7.0): ");
//            String germaNet = args[0].substring(args[0].lastIndexOf("/") + 1,
//                    args[0].length());

            File directory = new File(args[1]);
            File[] files = directory.listFiles();
            for (File f : files) { //first search for the already formatted input
                if (f.getName().equals("frequencies.csv")) {
                    frequencies = Frequency.loadFreq(args[1] + "/frequencies.csv");
                    break;
                }
            }

            if (frequencies == null) { //if no such input is found, create it
                System.out.println("No input file in format SynsetID - Frequency found.");
                System.out.println("This file will be created now, "
                        + "note that the process might take a while.");
                Frequency.assignFrequencies(args[1], gnet);
                System.out.println("File generation complete!");
                frequencies = Frequency.loadFreq(args[1] + "/frequencies.csv");
            }
            java.awt.EventQueue.invokeLater(new Runnable() {

                public void run() {
                    new MainFrame().setVisible(true);
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(0);
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem allPathsRootItem;
    private javax.swing.JButton calculateSRWordsButton;
    private javax.swing.JComboBox chooseMeasureComboBox;
    private javax.swing.JComboBox chooseSynset1ComboBox;
    private javax.swing.JComboBox chooseSynset2ComboBox;
    private javax.swing.JButton clearOutputAreaButton;
    private javax.swing.JMenuItem closeMenuItem;
    private javax.swing.JMenuItem distanceToRoot;
    private javax.swing.JMenuItem fileChooserItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem holonymsItem;
    private javax.swing.JMenuItem hyperonymsItem;
    private javax.swing.JMenuItem hyponymItem;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton leastCommonSubsumerButton;
    private javax.swing.JMenuItem meronymsItem;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JMenu pathMenu;
    private javax.swing.JMenu relationsMenu;
    private javax.swing.JMenuItem shortestPathRootItem;
    private javax.swing.JButton showPathButton;
    private javax.swing.JLabel w1Label;
    private javax.swing.JLabel w2Label;
    private javax.swing.JTextField word1TextField;
    private javax.swing.JTextField word2TextField;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
